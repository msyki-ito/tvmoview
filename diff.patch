diff --git a/SYMBOLS.md b/SYMBOLS.md
index e90a5aff707d383a8becf3fc42df24ec0bf01928..c80fdaa45b10f6b16aa55733e90255d1e34b93e4 100644
--- a/SYMBOLS.md
+++ b/SYMBOLS.md
@@ -82,50 +82,51 @@
   - [F] getCurrentPath(folderId: String?): String
   - [F] getFolderItems(folderId: String): List<MediaItem>
   - [F] getRootItems(): List<MediaItem>
 
 ## com.example.tvmoview.data.repository
 - OneDriveRepository
   - [F] getCachedItems(folderId: String?): List<MediaItem>
   - [F] getCurrentPath(folderId: String?): String
   - [F] getDownloadUrl(itemId: String): String?
   - [F] getFolderItems(folderId: String? = null, force: Boolean = false): Flow<List<MediaItem>>
 
 ## com.example.tvmoview.domain.model
 - MediaItem
   - [P] downloadUrl: String?
   - [P] fileExtension: String
   - [P] formattedSize: String
   - [P] id: String,
   - [P] isFolder: Boolean
   - [P] isImage: Boolean
   - [P] isVideo: Boolean
   - [P] lastModified: Date
   - [P] mimeType: String?
   - [P] name: String,
   - [P] size: Long
   - [P] thumbnailUrl: String?
+  - [P] duration: Long
 
 ## com.example.tvmoview.presentation.screens
 - Authenticated
 
 ## com.example.tvmoview.presentation.screens
 - Checking
 
 ## com.example.tvmoview.presentation.screens
 - Error
 
 ## com.example.tvmoview.presentation.screens
 - GettingCode
 
 ## com.example.tvmoview.presentation.screens
 - NotAuthenticated
 
 ## com.example.tvmoview.presentation.screens
 - Ready
 
 ## com.example.tvmoview.presentation.screens
 - ShowingCode
 
 ## com.example.tvmoview.presentation.screens
 - Success
 
@@ -146,26 +147,33 @@
 - FireTVOptimizations
   - [F] initializeForFireTV(activity: Activity)
 
 ## com.example.tvmoview
 - Authenticated
 
 ## com.example.tvmoview
 - Checking
 
 ## com.example.tvmoview
 - ExampleInstrumentedTest
   - [F] useAppContext()
 
 ## com.example.tvmoview
 - ExampleUnitTest
   - [F] addition_isCorrect()
 
 ## com.example.tvmoview
 - MainActivity
   - [F] AuthenticationWrapper()
 
 ## com.example.tvmoview
 - NotAuthenticated
   - [F] AppNavigation()
 
+## com.example.tvmoview.data.prefs
+- UserPreferences
+  - [F] init(context: Context)
+  - [P] sortBy: String
+  - [P] sortOrder: String
+  - [P] tileColumns: Int
+
 
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 787813cee9366ff330d7ff1455a5a904c5f8d634..2427a5762508a437cc09c35d8173454c0a77c523 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -1,31 +1,30 @@
 plugins {
     id("com.android.application")
     id("org.jetbrains.kotlin.android")
     id("org.jetbrains.kotlin.plugin.compose") version "2.0.0"
-    // ✅ kapt プラグイン追加
-    id("org.jetbrains.kotlin.kapt")
+    id("com.google.devtools.ksp")
 }
 
 android {
     namespace = "com.example.tvmoview"
     compileSdk = 34
 
     defaultConfig {
         applicationId = "com.example.tvmoview"
         minSdk = 26
         targetSdk = 34
         versionCode = 1
         versionName = "1.0"
 
         testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
         vectorDrawables {
             useSupportLibrary = true
         }
     }
 
     buildTypes {
         release {
             isMinifyEnabled = false
             proguardFiles(
                 getDefaultProguardFile("proguard-android-optimize.txt"),
                 "proguard-rules.pro"
@@ -33,78 +32,78 @@ android {
         }
     }
 
     compileOptions {
         sourceCompatibility = JavaVersion.VERSION_1_8
         targetCompatibility = JavaVersion.VERSION_1_8
     }
 
     kotlinOptions {
         jvmTarget = "1.8"
     }
 
     buildFeatures {
         compose = true
     }
 
     packaging {
         resources {
             excludes += "/META-INF/{AL2.0,LGPL2.1}"
         }
     }
 }
 
 dependencies {
     // Core Android
-    implementation("androidx.core:core-ktx:1.12.0")
-    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
-    implementation("androidx.activity:activity-compose:1.8.2")
+    implementation(libs.androidx.core.ktx)
+    implementation(libs.androidx.lifecycle.runtime.ktx)
+    implementation(libs.androidx.activity.compose)
 
     // Compose BOM
-    implementation(platform("androidx.compose:compose-bom:2024.02.00"))
-    implementation("androidx.compose.ui:ui")
-    implementation("androidx.compose.ui:ui-graphics")
-    implementation("androidx.compose.ui:ui-tooling-preview")
-    implementation("androidx.compose.material3:material3")
+    implementation(platform(libs.androidx.compose.bom))
+    implementation(libs.androidx.ui)
+    implementation(libs.androidx.ui.graphics)
+    implementation(libs.androidx.ui.tooling.preview)
+    implementation(libs.androidx.material3)
     implementation("androidx.compose.material:material-icons-extended")
 
     // Navigation
-    implementation("androidx.navigation:navigation-compose:2.7.6")
+    implementation(libs.androidx.navigation.compose)
 
     // ViewModel
     implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0")
 
     // Coroutines
-    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
+    implementation(libs.kotlinx.coroutines.android)
 
     // TV Support
-    implementation("androidx.tv:tv-foundation:1.0.0-alpha10")
-    implementation("androidx.tv:tv-material:1.0.0-alpha10")
+    implementation(libs.androidx.tv.foundation)
+    implementation(libs.androidx.tv.material)
     implementation("androidx.leanback:leanback:1.0.0")
 
     // ✅ Media3 ExoPlayer（動画再生強化）
-    implementation("androidx.media3:media3-exoplayer:1.2.1")
-    implementation("androidx.media3:media3-ui:1.2.1")
-    implementation("androidx.media3:media3-common:1.2.1")
+    implementation(libs.androidx.media3.exoplayer)
+    implementation(libs.androidx.media3.ui)
+    implementation(libs.androidx.media3.common)
 
     // ✅ Image Loading（将来の画像ビューア用）
-    implementation("io.coil-kt:coil-compose:2.5.0")
-    implementation("io.coil-kt:coil:2.5.0")
+    implementation(libs.coil.compose)
+    implementation(libs.coil)
 
     // ✅ Room Database（将来のキャッシュ機能用）
-    implementation("androidx.room:room-runtime:2.6.1")
-    implementation("androidx.room:room-ktx:2.6.1")
-    kapt("androidx.room:room-compiler:2.6.1") // ✅ kapt使用
+    implementation(libs.androidx.room.runtime)
+    implementation(libs.androidx.room.ktx)
+    ksp(libs.androidx.room.compiler)
 
     // HTTP通信（OneDrive API）
-    implementation("com.squareup.okhttp3:okhttp:4.12.0")
-    implementation("com.squareup.retrofit2:retrofit:2.9.0")
-    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
-    implementation("com.squareup.okhttp3:logging-interceptor:4.12.0")
+    implementation(libs.okhttp)
+    implementation(libs.retrofit)
+    implementation(libs.retrofit.converter.gson)
+    implementation(libs.okhttp.logging)
 
     // Security
     implementation("androidx.security:security-crypto:1.1.0-alpha06")
 
     // Debug
-    debugImplementation("androidx.compose.ui:ui-tooling")
-    debugImplementation("androidx.compose.ui:ui-test-manifest")
+    debugImplementation(libs.androidx.ui.tooling)
+    debugImplementation(libs.androidx.ui.test.manifest)
 }
\ No newline at end of file
diff --git a/app/build.gradle.kts.rej b/app/build.gradle.kts.rej
deleted file mode 100644
index aadc6aabb79941ffe0a7f5c57ffaca84570a7052..0000000000000000000000000000000000000000
--- a/app/build.gradle.kts.rej
+++ /dev/null
@@ -1,53 +0,0 @@
-diff a/app/build.gradle.kts b/app/build.gradle.kts	(rejected hunks)
-@@ -32,50 +32,51 @@ android {
-             )
-         }
-     }
- 
-     compileOptions {
-         sourceCompatibility = JavaVersion.VERSION_1_8
-         targetCompatibility = JavaVersion.VERSION_1_8
-     }
- 
-     kotlinOptions {
-         jvmTarget = "1.8"
-     }
- 
-     buildFeatures {
-         compose = true
-     }
- 
-     packaging {
-         resources {
-             excludes += "/META-INF/{AL2.0,LGPL2.1}"
-         }
-     }
- }
- 
- dependencies {
-+    // TODO: replace hardcoded versions with version catalog references
-     // Core Android
-     implementation("androidx.core:core-ktx:1.12.0")
-     implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
-     implementation("androidx.activity:activity-compose:1.8.2")
- 
-     // Compose BOM
-     implementation(platform("androidx.compose:compose-bom:2024.02.00"))
-     implementation("androidx.compose.ui:ui")
-     implementation("androidx.compose.ui:ui-graphics")
-     implementation("androidx.compose.ui:ui-tooling-preview")
-     implementation("androidx.compose.material3:material3")
-     implementation("androidx.compose.material:material-icons-extended")
- 
-     // Navigation
-     implementation("androidx.navigation:navigation-compose:2.7.6")
- 
-     // ViewModel
-     implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0")
- 
-     // Coroutines
-     implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
- 
-     // TV Support
-     implementation("androidx.tv:tv-foundation:1.0.0-alpha10")
-     implementation("androidx.tv:tv-material:1.0.0-alpha10")
diff --git a/app/src/main/java/com/example/tvmoview/MainActivity.kt b/app/src/main/java/com/example/tvmoview/MainActivity.kt
index 47b71b04d10c6bab60ba21f5a38764c7cba74e6a..114795ff6a19f6d9bfa03009ece13b6db2fd730f 100644
--- a/app/src/main/java/com/example/tvmoview/MainActivity.kt
+++ b/app/src/main/java/com/example/tvmoview/MainActivity.kt
@@ -1,72 +1,75 @@
 ﻿package com.example.tvmoview
 
 import android.content.Intent
 import android.os.Bundle
 import android.util.Log
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
 import androidx.compose.foundation.layout.*
 import androidx.compose.material3.*
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.NavType
 import androidx.navigation.compose.NavHost
 import androidx.navigation.compose.composable
 import androidx.navigation.compose.rememberNavController
 import androidx.navigation.navArgument
 import com.example.tvmoview.data.repository.MediaRepository
 import com.example.tvmoview.presentation.screens.*
-import com.example.tvmoview.presentation.theme.TVMovieTheme
-
-// OneDrive統合のための新しいimport
-import com.example.tvmoview.data.auth.AuthenticationManager
-import com.example.tvmoview.data.repository.OneDriveRepository
-import com.example.tvmoview.data.db.MediaDatabaseProvider
+import com.example.tvmoview.presentation.theme.TVMovieTheme
+
+// OneDrive統合のための新しいimport
+import com.example.tvmoview.data.auth.AuthenticationManager
+import com.example.tvmoview.data.repository.OneDriveRepository
+import com.example.tvmoview.data.db.MediaDatabaseProvider
+import com.example.tvmoview.data.prefs.UserPreferences
 import coil.ImageLoader
 import coil.Coil
 import coil.disk.DiskCache
 import coil.memory.MemoryCache
 import okhttp3.OkHttpClient
 
 class MainActivity : ComponentActivity() {
 
     companion object {
         lateinit var mediaRepository: MediaRepository
 
         // OneDrive統合のための新しい変数
         lateinit var authManager: AuthenticationManager
         lateinit var oneDriveRepository: OneDriveRepository
     }
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
-        // 既存のテストデータ用（そのまま残す）
-        mediaRepository = MediaRepository(this)
+        // 既存のテストデータ用（そのまま残す）
+        mediaRepository = MediaRepository(this)
+
+        UserPreferences.init(this)
 
         // OneDrive統合の初期化（新規追加）
         authManager = AuthenticationManager(this)
         MediaDatabaseProvider.init(this)
         oneDriveRepository = OneDriveRepository(
             authManager,
             MediaDatabaseProvider.database.mediaDao(),
             MediaDatabaseProvider.database.folderSyncDao()
         )
 
         val imageLoader = ImageLoader.Builder(this)
             .diskCache(
                 DiskCache.Builder()
                     .directory(cacheDir.resolve("image_cache"))
                     .maxSizeBytes(50L * 1024 * 1024) // 50MB
                     .build()
             )
             .memoryCache(
                 MemoryCache.Builder(this)
                     .maxSizePercent(0.15)
                     .build()
             )
             .okHttpClient {
                 OkHttpClient.Builder()
                     .addInterceptor { chain ->
diff --git a/app/src/main/java/com/example/tvmoview/data/prefs/UserPreferences.kt b/app/src/main/java/com/example/tvmoview/data/prefs/UserPreferences.kt
new file mode 100644
index 0000000000000000000000000000000000000000..38c3d9fe5324e2fc00fab8e64fa5977f3ecfa799
--- /dev/null
+++ b/app/src/main/java/com/example/tvmoview/data/prefs/UserPreferences.kt
@@ -0,0 +1,24 @@
+package com.example.tvmoview.data.prefs
+
+import android.content.Context
+import android.content.SharedPreferences
+
+object UserPreferences {
+    private lateinit var prefs: SharedPreferences
+
+    fun init(context: Context) {
+        prefs = context.getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
+    }
+
+    var sortBy: String
+        get() = prefs.getString("sort_by", "NAME") ?: "NAME"
+        set(value) { prefs.edit().putString("sort_by", value).apply() }
+
+    var sortOrder: String
+        get() = prefs.getString("sort_order", "DESC") ?: "DESC"
+        set(value) { prefs.edit().putString("sort_order", value).apply() }
+
+    var tileColumns: Int
+        get() = prefs.getInt("tile_columns", 4)
+        set(value) { prefs.edit().putInt("tile_columns", value).apply() }
+}
diff --git a/app/src/main/java/com/example/tvmoview/data/repository/MediaRepository.kt b/app/src/main/java/com/example/tvmoview/data/repository/MediaRepository.kt
index 8c95d2cc731d3af6b966e2d0273a4252f1190fad..2dea68472c55daf45cb4d689c10bcce87788d10c 100644
--- a/app/src/main/java/com/example/tvmoview/data/repository/MediaRepository.kt
+++ b/app/src/main/java/com/example/tvmoview/data/repository/MediaRepository.kt
@@ -10,109 +10,112 @@ class MediaRepository(private val context: Context) {
     suspend fun getRootItems(): List<MediaItem> {
         delay(1000)
 
         return listOf(
             MediaItem(
                 id = "folder1",
                 name = "📁 写真コレクション",
                 size = 0,
                 lastModified = Date(),
                 isFolder = true
             ),
             MediaItem(
                 id = "folder2", 
                 name = "📁 動画ライブラリ",
                 size = 0,
                 lastModified = Date(),
                 isFolder = true
             ),
             MediaItem(
                 id = "folder3",
                 name = "📁 ドキュメント",
                 size = 0,
                 lastModified = Date(),
                 isFolder = true
             ),
-            MediaItem(
-                id = "video1",
-                name = "🎬 家族の思い出.mp4",
-                size = 52428800,
-                lastModified = Date(System.currentTimeMillis() - 86400000),
-                mimeType = "video/mp4"
-            ),
-            MediaItem(
-                id = "video2",
-                name = "🎬 旅行記録.mp4",
-                size = 85214800,
-                lastModified = Date(System.currentTimeMillis() - 172800000),
-                mimeType = "video/mp4"
-            ),
+            MediaItem(
+                id = "video1",
+                name = "🎬 家族の思い出.mp4",
+                size = 52428800,
+                lastModified = Date(System.currentTimeMillis() - 86400000),
+                mimeType = "video/mp4",
+                duration = 120000
+            ),
+            MediaItem(
+                id = "video2",
+                name = "🎬 旅行記録.mp4",
+                size = 85214800,
+                lastModified = Date(System.currentTimeMillis() - 172800000),
+                mimeType = "video/mp4",
+                duration = 180000
+            ),
             MediaItem(
                 id = "image1",
                 name = "🖼️ 夕日の風景.jpg",
                 size = 3145728,
                 lastModified = Date(System.currentTimeMillis() - 259200000),
                 mimeType = "image/jpeg"
             ),
             MediaItem(
                 id = "image2",
                 name = "🖼️ 花の写真.jpg",
                 size = 2456789,
                 lastModified = Date(System.currentTimeMillis() - 345600000),
                 mimeType = "image/jpeg"
             )
         )
     }
 
     suspend fun getFolderItems(folderId: String): List<MediaItem> {
         delay(800)
 
         return when (folderId) {
             "folder1" -> {
                 // 写真フォルダの内容
                 (1..12).map { i ->
                     MediaItem(
                         id = "image_$i",
                         name = "📸 写真$i.jpg",
                         size = (1000000..5000000).random().toLong(),
                         lastModified = Date(System.currentTimeMillis() - i * 86400000),
                         mimeType = "image/jpeg"
                     )
                 }
             }
-            "folder2" -> {
-                // 動画フォルダの内容
-                (1..8).map { i ->
-                    MediaItem(
-                        id = "video_$i",
-                        name = "🎥 動画$i.mp4",
-                        size = (50000000..200000000).random().toLong(),
-                        lastModified = Date(System.currentTimeMillis() - i * 86400000),
-                        mimeType = "video/mp4"
-                    )
-                }
-            }
+            "folder2" -> {
+                // 動画フォルダの内容
+                (1..8).map { i ->
+                    MediaItem(
+                        id = "video_$i",
+                        name = "🎥 動画$i.mp4",
+                        size = (50000000..200000000).random().toLong(),
+                        lastModified = Date(System.currentTimeMillis() - i * 86400000),
+                        mimeType = "video/mp4",
+                        duration = (60_000L * (1 + i))
+                    )
+                }
+            }
             "folder3" -> {
                 // ドキュメントフォルダの内容
                 listOf(
                     MediaItem(
                         id = "doc1",
                         name = "📄 重要資料.pdf",
                         size = 1234567,
                         lastModified = Date(),
                         mimeType = "application/pdf"
                     ),
                     MediaItem(
                         id = "doc2",
                         name = "📄 プレゼン資料.pptx",
                         size = 2345678,
                         lastModified = Date(),
                         mimeType = "application/vnd.ms-powerpoint"
                     )
                 )
             }
             else -> emptyList()
         }
     }
 
     fun getCurrentPath(folderId: String?): String {
         return when (folderId) {
diff --git a/app/src/main/java/com/example/tvmoview/domain/model/MediaItem.kt b/app/src/main/java/com/example/tvmoview/domain/model/MediaItem.kt
index d84ae190e9fff95b095494eb20a4414a26f3adbf..2b3396f8fc2a398b91d47cd228ac7f05a0637f75 100644
--- a/app/src/main/java/com/example/tvmoview/domain/model/MediaItem.kt
+++ b/app/src/main/java/com/example/tvmoview/domain/model/MediaItem.kt
@@ -1,31 +1,32 @@
 ﻿package com.example.tvmoview.domain.model
 
 import java.util.*
 
 data class MediaItem(
     val id: String,
     val name: String,
     val size: Long = 0,
     val lastModified: Date = Date(),
     val mimeType: String? = null,
-    val isFolder: Boolean = false,
-    val thumbnailUrl: String? = null,
-    val downloadUrl: String? = null  // OneDrive用ダウンロードURL追加
-) {
+    val isFolder: Boolean = false,
+    val thumbnailUrl: String? = null,
+    val downloadUrl: String? = null,  // OneDrive用ダウンロードURL追加
+    val duration: Long = 0L
+) {
     val isVideo: Boolean
         get() = mimeType?.startsWith("video/") == true
 
     val isImage: Boolean
         get() = mimeType?.startsWith("image/") == true
 
     val fileExtension: String
         get() = name.substringAfterLast(".", "")
 
     val formattedSize: String
         get() = when {
             size < 1024 -> "${size}B"
             size < 1024 * 1024 -> "${size / 1024}KB"
             size < 1024 * 1024 * 1024 -> "${size / (1024 * 1024)}MB"
             else -> "${size / (1024 * 1024 * 1024)}GB"
         }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/example/tvmoview/presentation/components/ModernMediaCard.kt b/app/src/main/java/com/example/tvmoview/presentation/components/ModernMediaCard.kt
index d5d1591b2023e166cc8ada354a43994cdeeae63d..66b23e0ca60b3251d9bd924348f77e9313f76f4a 100644
--- a/app/src/main/java/com/example/tvmoview/presentation/components/ModernMediaCard.kt
+++ b/app/src/main/java/com/example/tvmoview/presentation/components/ModernMediaCard.kt
@@ -3,184 +3,213 @@
 import androidx.compose.animation.core.*
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.*
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.*
 import androidx.compose.material3.*
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.geometry.Offset
 import androidx.compose.ui.graphics.Brush
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.text.style.TextOverflow
 import androidx.compose.ui.unit.dp
 import coil.compose.SubcomposeAsyncImage
 import coil.request.ImageRequest
 import coil.request.CachePolicy
 import com.example.tvmoview.domain.model.MediaItem
 import java.text.SimpleDateFormat
 import java.util.*
 
 @Composable
-fun ModernMediaCard(
-    item: MediaItem,
-    onClick: () -> Unit,
-    loadPriority: Float = 0.5f
-) {
+fun ModernMediaCard(
+    item: MediaItem,
+    onClick: () -> Unit,
+    loadPriority: Float = 0.5f,
+    showName: Boolean = true
+) {
     Card(
         modifier = Modifier
-            .fillMaxWidth()
-            .height(200.dp)
-            .clickable { onClick() },
+            .fillMaxWidth()
+            .aspectRatio(1f)
+            .clickable { onClick() },
         elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
     ) {
         Column(modifier = Modifier.fillMaxSize()) {
             Box(
                 modifier = Modifier.fillMaxWidth().weight(1f),
                 contentAlignment = Alignment.Center
             ) {
                 val context = LocalContext.current
 
-                when {
-                    item.thumbnailUrl != null || (item.isVideo || item.isImage) -> {
-                        SubcomposeAsyncImage(
+                when {
+                    item.thumbnailUrl != null || (item.isVideo || item.isImage) -> {
+                        SubcomposeAsyncImage(
                             model = ImageRequest.Builder(context)
                                 .data(item.thumbnailUrl ?: generateVideoThumbnail(item))
                                 .diskCacheKey("thumb_${item.id}")
                                 .crossfade(300)
                                 .size(400, 300)
                                 .memoryCachePolicy(CachePolicy.ENABLED)
                                 .diskCachePolicy(CachePolicy.ENABLED)
                                 .build(),
                             contentDescription = null,
                             contentScale = ContentScale.Crop,
                             modifier = Modifier.fillMaxSize(),
                             loading = {
                                 Box(
                                     modifier = Modifier
                                         .fillMaxSize()
                                         .background(
                                             shimmerBrush(
                                                 targetValue = 1300f,
                                                 showShimmer = true
                                             )
                                         )
                                 )
                             },
-                            error = {
-                                Box(
-                                    modifier = Modifier.fillMaxSize(),
-                                    contentAlignment = Alignment.Center
-                                ) {
-                                    Icon(
-                                        imageVector = when {
-                                            item.isVideo -> Icons.Default.PlayArrow
-                                            item.isImage -> Icons.Default.Image
-                                            else -> Icons.Default.Description
-                                        },
-                                        contentDescription = null,
-                                        modifier = Modifier.size(48.dp),
-                                        tint = MaterialTheme.colorScheme.primary
-                                    )
-                                }
-                            }
-                        )
-                    }
-                    item.isFolder -> {
+                            error = {
+                                Box(
+                                    modifier = Modifier.fillMaxSize(),
+                                    contentAlignment = Alignment.Center
+                                ) {
+                                    Icon(
+                                        imageVector = when {
+                                            item.isVideo -> Icons.Default.PlayArrow
+                                            item.isImage -> Icons.Default.Image
+                                            else -> Icons.Default.Description
+                                        },
+                                        contentDescription = null,
+                                        modifier = Modifier.size(48.dp),
+                                        tint = MaterialTheme.colorScheme.primary
+                                    )
+                                }
+                            }
+                        )
+                        if (item.isVideo) {
+                            Icon(
+                                imageVector = Icons.Default.PlayArrow,
+                                contentDescription = null,
+                                tint = Color.White,
+                                modifier = Modifier
+                                    .align(Alignment.Center)
+                                    .size(48.dp)
+                            )
+                            Text(
+                                text = formatTime(item.duration),
+                                color = Color.White,
+                                style = MaterialTheme.typography.bodySmall,
+                                modifier = Modifier
+                                    .align(Alignment.BottomEnd)
+                                    .background(Color.Black.copy(alpha = 0.6f))
+                                    .padding(4.dp)
+                            )
+                        }
+                    }
+                    item.isFolder -> {
                         Icon(
                             imageVector = Icons.Default.Folder,
                             contentDescription = null,
                             modifier = Modifier.size(48.dp),
                             tint = MaterialTheme.colorScheme.primary
                         )
                     }
                     else -> {
                         Icon(
                             imageVector = Icons.Default.Description,
                             contentDescription = null,
                             modifier = Modifier.size(48.dp),
                             tint = MaterialTheme.colorScheme.primary
                         )
                     }
                 }
             }
 
-            Column(modifier = Modifier.padding(12.dp)) {
-                Text(
-                    text = item.name,
-                    style = MaterialTheme.typography.bodyMedium,
-                    maxLines = 2,
-                    overflow = TextOverflow.Ellipsis
-                )
-
-                if (!item.isFolder) {
-                    val dateFormat = SimpleDateFormat("yyyy/MM/dd", Locale.getDefault())
-                    Text(
-                        text = "${formatFileSize(item.size)} • ${dateFormat.format(item.lastModified)}",
-                        style = MaterialTheme.typography.bodySmall,
-                        color = MaterialTheme.colorScheme.onSurfaceVariant
-                    )
-                }
-            }
-        }
-    }
-}
+            Column(modifier = Modifier.padding(12.dp)) {
+                if (showName) {
+                    Text(
+                        text = item.name,
+                        style = MaterialTheme.typography.bodyMedium,
+                        maxLines = 2,
+                        overflow = TextOverflow.Ellipsis
+                    )
+
+                    if (!item.isFolder) {
+                        val dateFormat = SimpleDateFormat("yyyy/MM/dd", Locale.getDefault())
+                        Text(
+                            text = "${formatFileSize(item.size)} • ${dateFormat.format(item.lastModified)}",
+                            style = MaterialTheme.typography.bodySmall,
+                            color = MaterialTheme.colorScheme.onSurfaceVariant
+                        )
+                    }
+                }
+            }
+        }
+    }
+}
 
 // 動画サムネイルURL生成
 private fun generateVideoThumbnail(item: MediaItem): String? {
     return if (item.isVideo && item.id.isNotEmpty() && !item.id.startsWith("test")) {
         "https://graph.microsoft.com/v1.0/me/drive/items/${item.id}/thumbnails/0/large/content"
     } else {
         item.thumbnailUrl
     }
 }
 
 // シマーエフェクト用ブラシ
 @Composable
 fun shimmerBrush(targetValue: Float = 1000f, showShimmer: Boolean = true): Brush {
     return if (showShimmer) {
         val shimmerColors = listOf(
             Color.LightGray.copy(alpha = 0.6f),
             Color.LightGray.copy(alpha = 0.2f),
             Color.LightGray.copy(alpha = 0.6f),
         )
 
         val transition = rememberInfiniteTransition(label = "shimmer")
         val translateAnimation = transition.animateFloat(
             initialValue = 0f,
             targetValue = targetValue,
             animationSpec = infiniteRepeatable(
                 animation = tween(800),
                 repeatMode = RepeatMode.Reverse
             ),
             label = "shimmer"
         )
         Brush.linearGradient(
             colors = shimmerColors,
             start = Offset.Zero,
             end = Offset(x = translateAnimation.value, y = translateAnimation.value)
         )
     } else {
         Brush.linearGradient(
             colors = listOf(Color.Transparent, Color.Transparent),
             start = Offset.Zero,
             end = Offset.Zero
         )
     }
 }
 
-private fun formatFileSize(size: Long): String {
+private fun formatFileSize(size: Long): String {
     val kb = 1024
     val mb = kb * 1024
     val gb = mb * 1024
 
     return when {
         size >= gb -> String.format("%.1f GB", size.toDouble() / gb)
         size >= mb -> String.format("%.1f MB", size.toDouble() / mb)
         size >= kb -> String.format("%.1f KB", size.toDouble() / kb)
         else -> "$size B"
     }
+}
+
+private fun formatTime(ms: Long): String {
+    val totalSec = ms / 1000
+    val min = totalSec / 60
+    val sec = totalSec % 60
+    return "%d:%02d".format(min, sec)
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/example/tvmoview/presentation/components/ModernTileView.kt b/app/src/main/java/com/example/tvmoview/presentation/components/ModernTileView.kt
index 947686c45644399b299f81be7f658b37601d5042..6dfa6679ac229caa3f852961dad264e3fe3e7ab1 100644
--- a/app/src/main/java/com/example/tvmoview/presentation/components/ModernTileView.kt
+++ b/app/src/main/java/com/example/tvmoview/presentation/components/ModernTileView.kt
@@ -1,51 +1,55 @@
 ﻿package com.example.tvmoview.presentation.components
 
 import androidx.compose.foundation.layout.*
 import androidx.compose.foundation.lazy.grid.*
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.unit.dp
 import com.example.tvmoview.domain.model.MediaItem
 
 @Composable
-fun ModernTileView(
-    items: List<MediaItem>,
-    onItemClick: (MediaItem) -> Unit
-) {
-    LazyVerticalGrid(
-        columns = GridCells.Adaptive(minSize = 200.dp),
-        contentPadding = PaddingValues(16.dp),
-        horizontalArrangement = Arrangement.spacedBy(16.dp),
-        verticalArrangement = Arrangement.spacedBy(16.dp)
-    ) {
-        itemsIndexed(items) { index, item ->
+fun ModernTileView(
+    items: List<MediaItem>,
+    columnCount: Int,
+    state: LazyGridState,
+    onItemClick: (MediaItem) -> Unit
+) {
+    LazyVerticalGrid(
+        columns = GridCells.Fixed(columnCount),
+        state = state,
+        contentPadding = PaddingValues(0.dp),
+        horizontalArrangement = Arrangement.spacedBy(0.dp),
+        verticalArrangement = Arrangement.spacedBy(0.dp)
+    ) {
+        itemsIndexed(items) { index, item ->
             // 表示優先度を設定
             val priority = when {
                 index < 10 -> 1.0f  // 最初の10個は最優先
                 index < 30 -> 0.5f  // 次の20個は中優先度
                 else -> 0.1f        // それ以降は低優先度
             }
 
-            ModernMediaCard(
-                item = item,
-                onClick = { onItemClick(item) },
-                loadPriority = priority
-            )
-        }
-    }
-}
+            ModernMediaCard(
+                item = item,
+                onClick = { onItemClick(item) },
+                loadPriority = priority,
+                showName = item.isFolder
+            )
+        }
+    }
+}
 
 //    // プリフェッチ設定
 //    LaunchedEffect(gridState) {
 //        snapshotFlow { gridState.firstVisibleItemIndex }
 //            .collect { firstVisible ->
 //                // 見える範囲の前後をプリフェッチ
 //                val prefetchRange = 10
 //                val start = (firstVisible - prefetchRange).coerceAtLeast(0)
 //                val end = (firstVisible + prefetchRange).coerceAtMost(items.size - 1)
 //
 //                // ここでプリフェッチ処理を実行
 //                Log.d("ModernTileView", "Prefetch range: $start to $end")
 //            }
 //    }
 //}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/tvmoview/presentation/components/ModernTopBar.kt b/app/src/main/java/com/example/tvmoview/presentation/components/ModernTopBar.kt
index 2f5f18b8b6c2757de0542cc3f5e17506cd63f47e..2f8a70155588f01122ac92f5a591a33fd2ecfe58 100644
--- a/app/src/main/java/com/example/tvmoview/presentation/components/ModernTopBar.kt
+++ b/app/src/main/java/com/example/tvmoview/presentation/components/ModernTopBar.kt
@@ -1,54 +1,59 @@
 ﻿package com.example.tvmoview.presentation.components
 
 import androidx.compose.animation.core.*
 import androidx.compose.foundation.layout.*
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.*
 import androidx.compose.material3.*
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.graphicsLayer
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.unit.dp
 
 // ViewMode import追加
-import com.example.tvmoview.presentation.viewmodels.ViewMode
+import com.example.tvmoview.presentation.viewmodels.ViewMode
+import com.example.tvmoview.presentation.viewmodels.SortOrder
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
-fun ModernTopBar(
-    currentPath: String,
-    viewMode: ViewMode,
-    onViewModeChange: () -> Unit,
-    onSortClick: () -> Unit,
-    onRefreshClick: () -> Unit,
-    onSettingsClick: (() -> Unit)? = null,
-    onBackClick: (() -> Unit)? = null,
-    isLoading: Boolean = false
-) {
+fun ModernTopBar(
+    currentPath: String,
+    viewMode: ViewMode,
+    sortOrder: SortOrder,
+    tileColumns: Int,
+    onViewModeChange: () -> Unit,
+    onTileColumnsChange: () -> Unit,
+    onSortClick: () -> Unit,
+    onOrderToggle: () -> Unit,
+    onRefreshClick: () -> Unit,
+    onSettingsClick: (() -> Unit)? = null,
+    onBackClick: (() -> Unit)? = null,
+    isLoading: Boolean = false
+) {
     // 回転アニメーション
     val rotation by animateFloatAsState(
         targetValue = if (isLoading) 360f else 0f,
         animationSpec = if (isLoading) {
             infiniteRepeatable(
                 animation = tween(1000, easing = LinearEasing),
                 repeatMode = RepeatMode.Restart
             )
         } else {
             tween(200)
         },
         label = "refresh_rotation"
     )
 
     TopAppBar(
         title = {
             Row(
                 modifier = Modifier.fillMaxWidth(),
                 verticalAlignment = Alignment.CenterVertically
             ) {
                 if (onBackClick != null) {
                     IconButton(onClick = onBackClick) {
                         Icon(
                             imageVector = Icons.Default.ArrowBack,
                             contentDescription = "戻る"
@@ -63,60 +68,73 @@ fun ModernTopBar(
                         Text(
                             text = "TV Movie Viewer",
                             style = MaterialTheme.typography.titleMedium,
                             fontWeight = FontWeight.Bold,
                             modifier = Modifier.weight(1f, fill = false)
                         )
                         // 更新中表示
                         if (isLoading) {
                             Spacer(modifier = Modifier.width(8.dp))
                             Text(
                                 text = "更新中...",
                                 style = MaterialTheme.typography.bodySmall,
                                 color = MaterialTheme.colorScheme.primary
                             )
                         }
                     }
                     Text(
                         text = currentPath,
                         style = MaterialTheme.typography.bodySmall,
                         color = MaterialTheme.colorScheme.onSurfaceVariant
                     )
                 }
             }
         },
         actions = {
-            // 表示モード切り替えボタン
-            IconButton(onClick = onViewModeChange) {
-                Icon(
-                    imageVector = when (viewMode) {
-                        ViewMode.TILE -> Icons.Default.ViewList
-                        ViewMode.LIST -> Icons.Default.ViewModule
-                    },
-                    contentDescription = "表示モード切り替え"
-                )
-            }
+            // 表示モード切り替えボタン
+            IconButton(onClick = onViewModeChange) {
+                Icon(
+                    imageVector = when (viewMode) {
+                        ViewMode.TILE -> Icons.Default.ViewList
+                        ViewMode.LIST -> Icons.Default.ViewModule
+                    },
+                    contentDescription = "表示モード切り替え"
+                )
+            }
+
+            if (viewMode == ViewMode.TILE) {
+                IconButton(onClick = onTileColumnsChange) {
+                    Text(tileColumns.toString())
+                }
+            }
+
+            IconButton(onClick = onOrderToggle) {
+                Icon(
+                    imageVector = if (sortOrder == SortOrder.ASC) Icons.Default.ArrowUpward else Icons.Default.ArrowDownward,
+                    contentDescription = "並び順方向"
+                )
+            }
 
             // 更新ボタン（回転アニメーション付き）
             IconButton(
                 onClick = { if (!isLoading) onRefreshClick() },
                 enabled = !isLoading
             ) {
                 Icon(
                     imageVector = Icons.Default.Refresh,
                     contentDescription = if (isLoading) "更新中" else "更新",
                     modifier = Modifier.graphicsLayer {
                         rotationZ = rotation
                     }
                 )
             }
 
             // ソートボタン
             IconButton(onClick = onSortClick) {
                 Icon(
                     imageVector = Icons.Default.Sort,
                     contentDescription = "並び順"
                 )
             }
 
             // 設定ボタン
             if (onSettingsClick != null) {
diff --git a/app/src/main/java/com/example/tvmoview/presentation/components/SortDialog.kt b/app/src/main/java/com/example/tvmoview/presentation/components/SortDialog.kt
index 23f45a2ab231ffc3a98cfb7af87b316dfab108b6..32809f68624284a106db1f744a03ece18c1543e2 100644
--- a/app/src/main/java/com/example/tvmoview/presentation/components/SortDialog.kt
+++ b/app/src/main/java/com/example/tvmoview/presentation/components/SortDialog.kt
@@ -1,62 +1,101 @@
 ﻿package com.example.tvmoview.presentation.components
 
 import androidx.compose.foundation.layout.*
 import androidx.compose.foundation.selection.selectable
 import androidx.compose.material3.*
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.unit.dp
 
 // SortBy import追加
-import com.example.tvmoview.presentation.viewmodels.SortBy
+import com.example.tvmoview.presentation.viewmodels.SortBy
+import com.example.tvmoview.presentation.viewmodels.SortOrder
 
 @Composable
-fun SortDialog(
-    currentSort: SortBy,
-    onSortSelected: (SortBy) -> Unit,
-    onDismiss: () -> Unit
-) {
+fun SortDialog(
+    currentSort: SortBy,
+    currentOrder: SortOrder,
+    onSortSelected: (SortBy) -> Unit,
+    onOrderSelected: (SortOrder) -> Unit,
+    onDismiss: () -> Unit
+) {
     AlertDialog(
         onDismissRequest = onDismiss,
         title = {
             Text("並び順")
         },
         text = {
-            Column {
-                SortBy.values().forEach { sortOption ->
+            Column {
+                SortBy.values().forEach { sortOption ->
                     Row(
                         modifier = Modifier
                             .fillMaxWidth()
                             .selectable(
                                 selected = currentSort == sortOption,
                                 onClick = { onSortSelected(sortOption) }
                             )
                             .padding(vertical = 8.dp),
                         verticalAlignment = Alignment.CenterVertically
                     ) {
                         RadioButton(
                             selected = currentSort == sortOption,
                             onClick = { onSortSelected(sortOption) }
                         )
                         Spacer(modifier = Modifier.width(8.dp))
                         Text(
                             text = when (sortOption) {
                                 SortBy.NAME -> "名前順"
                                 SortBy.DATE -> "更新日時順"
                                 SortBy.SIZE -> "サイズ順"
-                                SortBy.TYPE -> "種類順"
-                            },
+                                SortBy.TYPE -> "種類順"
+                                SortBy.SHOOT -> "撮影日順"
+                            },
                             style = MaterialTheme.typography.bodyMedium
                         )
                     }
-                }
-            }
-        },
+                }
+                Spacer(modifier = Modifier.height(8.dp))
+                Row(
+                    modifier = Modifier
+                        .fillMaxWidth()
+                        .selectable(
+                            selected = currentOrder == SortOrder.ASC,
+                            onClick = { onOrderSelected(SortOrder.ASC) }
+                        )
+                        .padding(vertical = 8.dp),
+                    verticalAlignment = Alignment.CenterVertically
+                ) {
+                    RadioButton(
+                        selected = currentOrder == SortOrder.ASC,
+                        onClick = { onOrderSelected(SortOrder.ASC) }
+                    )
+                    Spacer(modifier = Modifier.width(8.dp))
+                    Text("昇順")
+                }
+                Row(
+                    modifier = Modifier
+                        .fillMaxWidth()
+                        .selectable(
+                            selected = currentOrder == SortOrder.DESC,
+                            onClick = { onOrderSelected(SortOrder.DESC) }
+                        )
+                        .padding(vertical = 8.dp),
+                    verticalAlignment = Alignment.CenterVertically
+                ) {
+                    RadioButton(
+                        selected = currentOrder == SortOrder.DESC,
+                        onClick = { onOrderSelected(SortOrder.DESC) }
+                    )
+                    Spacer(modifier = Modifier.width(8.dp))
+                    Text("降順")
+                }
+            }
+        },
         confirmButton = {
             TextButton(onClick = onDismiss) {
                 Text("閉じる")
             }
         }
     )
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/example/tvmoview/presentation/screens/HighQualityPlayerScreen.kt b/app/src/main/java/com/example/tvmoview/presentation/screens/HighQualityPlayerScreen.kt
index 7264eb64ba4e83f96d0e4fd6e6d322c86d92fe7f..20275d080bb9edc64e751af67f7156245816392a 100644
--- a/app/src/main/java/com/example/tvmoview/presentation/screens/HighQualityPlayerScreen.kt
+++ b/app/src/main/java/com/example/tvmoview/presentation/screens/HighQualityPlayerScreen.kt
@@ -1,114 +1,119 @@
 ﻿package com.example.tvmoview.presentation.screens
 
 import android.content.Context
 import android.util.Log
 import androidx.activity.compose.BackHandler
 import androidx.compose.foundation.background
 import androidx.compose.foundation.focusable
 import androidx.compose.foundation.layout.*
 import androidx.compose.material3.*
-import androidx.compose.runtime.*
+import androidx.compose.runtime.*
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.setValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.focus.FocusRequester
 import androidx.compose.ui.focus.focusRequester
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.input.key.*
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.viewinterop.AndroidView
 import kotlinx.coroutines.delay
 import kotlinx.coroutines.launch
 import androidx.media3.common.MediaItem
 import androidx.media3.exoplayer.ExoPlayer
 import androidx.media3.ui.PlayerView
 import com.example.tvmoview.MainActivity
 import kotlinx.coroutines.delay
 
 @Composable
 fun HighQualityPlayerScreen(
     itemId: String,
     onBack: () -> Unit,
     downloadUrl: String = ""
 ) {
     val context = LocalContext.current
     val focusRequester = remember { FocusRequester() }
     val coroutineScope = rememberCoroutineScope() // 追加
 
     // カスタムシークバー表示制御
     var showCustomSeek by remember { mutableStateOf(false) }
     var currentPosition by remember { mutableLongStateOf(0L) }
     var duration by remember { mutableLongStateOf(0L) }
-    var seekMessage by remember { mutableStateOf("") }
+    var seekMessage by remember { mutableStateOf("") }
+    val showInfo = remember { mutableStateOf(true) }
 
     // PlayerView参照用とコントローラー制御
     var playerView by remember { mutableStateOf<PlayerView?>(null) }
     var lastBackPressTime by remember { mutableLongStateOf(0L) }
 
     Log.d("VideoPlayer", "🎬 プレイヤー起動: itemId=$itemId")
 
     // ExoPlayer初期化
     val exoPlayer = remember {
         ExoPlayer.Builder(context).build().also { player ->
             val videoUrl = getVideoUrlSafely(itemId, downloadUrl, context)
             Log.d("VideoPlayer", "📺 動画URL設定: $videoUrl")
 
             val mediaItem = MediaItem.fromUri(videoUrl)
             player.setMediaItem(mediaItem)
             player.prepare()
             player.playWhenReady = true
         }
     }
 
     // カスタムシークバー表示コルーチン
     fun showSeekBarTemporarily(message: String) {
         currentPosition = exoPlayer.currentPosition
         duration = exoPlayer.duration
         seekMessage = message
         showCustomSeek = true
 
         // 1秒後に自動非表示
         coroutineScope.launch {
             delay(1000)
             showCustomSeek = false
         }
     }
 
     // クリーンアップ
     DisposableEffect(Unit) {
         onDispose {
             Log.d("VideoPlayer", "🧹 ExoPlayer解放")
             exoPlayer.release()
         }
     }
 
     // フォーカス設定
-    LaunchedEffect(Unit) {
-        focusRequester.requestFocus()
-    }
+    LaunchedEffect(Unit) {
+        focusRequester.requestFocus()
+        kotlinx.coroutines.delay(3000)
+        showInfo.value = false
+    }
 
     // 戻るボタン制御（ダブルプレス方式）
     BackHandler {
         val currentTime = System.currentTimeMillis()
         if (currentTime - lastBackPressTime < 1000) {
             // 1秒以内の2回目：実際に戻る
             Log.d("VideoPlayer", "🔙 画面を戻る（ダブルプレス）")
             onBack()
         } else {
             // 1回目：コントローラーを隠して時間記録
             playerView?.hideController()
             lastBackPressTime = currentTime
             Log.d("VideoPlayer", "🎮 コントロール非表示（1回目のプレス）")
         }
     }
 
     Box(
         modifier = Modifier
             .fillMaxSize()
             .background(Color.Black)
             .focusRequester(focusRequester)
             .focusable()
             .onKeyEvent { keyEvent ->
                 if (keyEvent.type == KeyEventType.KeyDown) {
                     when (keyEvent.key) {
@@ -165,62 +170,73 @@ fun HighQualityPlayerScreen(
                             } else {
                                 // 1回目：コントローラーを隠して時間記録
                                 playerView?.hideController()
                                 lastBackPressTime = currentTime
                                 Log.d("VideoPlayer", "🎮 コントロール非表示（1回目のプレス）")
                             }
                             true
                         }
                         // キーボード用（開発時）
                         Key.Spacebar -> {
                             if (exoPlayer.isPlaying) {
                                 exoPlayer.pause()
                             } else {
                                 exoPlayer.play()
                             }
                             true
                         }
                         else -> false
                     }
                 } else {
                     false
                 }
             }
     ) {
         // ExoPlayer表示
-        AndroidView(
-            factory = { ctx ->
-                PlayerView(ctx).apply {
-                    player = exoPlayer
-                    useController = true
-                    setShowSubtitleButton(true)
-                    setShowVrButton(false)
-                    playerView = this // 参照を保存
-                }
-            },
-            modifier = Modifier.fillMaxSize()
-        )
+        AndroidView(
+            factory = { ctx ->
+                PlayerView(ctx).apply {
+                    player = exoPlayer
+                    useController = true
+                    setShowSubtitleButton(true)
+                    setShowVrButton(false)
+                    playerView = this // 参照を保存
+                }
+            },
+            modifier = Modifier.fillMaxSize()
+        )
+
+        if (showInfo.value) {
+            Box(
+                modifier = Modifier
+                    .align(Alignment.TopStart)
+                    .background(Color.Black.copy(alpha = 0.6f))
+                    .padding(8.dp)
+            ) {
+                Text(itemId, color = Color.White)
+            }
+        }
 
         // カスタムシークバー（一時表示）
         if (showCustomSeek && duration > 0) {
             Box(
                 modifier = Modifier
                     .align(Alignment.BottomCenter)
                     .fillMaxWidth()
                     .padding(horizontal = 48.dp, vertical = 32.dp)
             ) {
                 Card(
                     colors = CardDefaults.cardColors(
                         containerColor = Color.Black.copy(alpha = 0.8f)
                     ),
                     modifier = Modifier.fillMaxWidth()
                 ) {
                     Column(
                         modifier = Modifier.padding(16.dp)
                     ) {
                         // シークメッセージ
                         Text(
                             text = seekMessage,
                             color = Color.White,
                             style = MaterialTheme.typography.bodyMedium,
                             fontWeight = FontWeight.Bold,
                             modifier = Modifier.align(Alignment.CenterHorizontally)
diff --git a/app/src/main/java/com/example/tvmoview/presentation/screens/ImageViewerScreen.kt b/app/src/main/java/com/example/tvmoview/presentation/screens/ImageViewerScreen.kt
index 307b37eedc9537ce1327b3bef422f434511e9efb..eb8e83f29191fde420cf3df237242162bb669c86 100644
--- a/app/src/main/java/com/example/tvmoview/presentation/screens/ImageViewerScreen.kt
+++ b/app/src/main/java/com/example/tvmoview/presentation/screens/ImageViewerScreen.kt
@@ -1,109 +1,117 @@
 ﻿package com.example.tvmoview.presentation.screens
 
 import android.util.Log
 import androidx.activity.compose.BackHandler
 import androidx.compose.foundation.background
 import androidx.compose.foundation.focusable
 import androidx.compose.foundation.layout.*
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.BrokenImage
 import androidx.compose.material3.*
-import androidx.compose.runtime.*
+import androidx.compose.runtime.*
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.setValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.focus.FocusRequester
 import androidx.compose.ui.focus.focusRequester
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.input.key.*
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.unit.dp
 import coil.compose.SubcomposeAsyncImage
 import coil.request.ImageRequest
 import com.example.tvmoview.MainActivity
 import com.example.tvmoview.domain.model.MediaItem
 import kotlinx.coroutines.launch
 
 @Composable
 fun ImageViewerScreen(
     currentImageId: String,
     folderId: String? = null,
     onBack: () -> Unit
 ) {
     val focusRequester = remember { FocusRequester() }
     val scope = rememberCoroutineScope()
     val context = LocalContext.current
 
     var imageItems by remember { mutableStateOf<List<MediaItem>>(emptyList()) }
     var currentIndex by remember { mutableIntStateOf(0) }
     var isLoading by remember { mutableStateOf(true) }
-    var imageUrl by remember { mutableStateOf<String?>(null) }
+    var imageUrl by remember { mutableStateOf<String?>(null) }
+    val showInfo = remember { mutableStateOf(true) }
 
     Log.d("ImageViewer", "Screen started with imageId: $currentImageId, folderId: $folderId")
 
     LaunchedEffect(folderId) {
         isLoading = true
         try {
             val items = MainActivity.oneDriveRepository.getCachedItems(folderId)
                 .filter { it.isImage }
 
             Log.d("ImageViewer", "Found ${items.size} images")
             imageItems = items
 
             val foundIndex = items.indexOfFirst { it.id == currentImageId }
             currentIndex = if (foundIndex >= 0) foundIndex else 0
 
             Log.d("ImageViewer", "Current index: $currentIndex")
 
             if (items.isNotEmpty() && currentIndex >= 0 && currentIndex < items.size) {
                 val currentItem = items[currentIndex]
                 Log.d("ImageViewer", "Loading image: ${currentItem.name}")
 
                 val url = MainActivity.oneDriveRepository
                     .getDownloadUrl(currentItem.id)
                     ?: currentItem.downloadUrl
                 imageUrl = url
                 Log.d("ImageViewer", "Image URL: $url")
             }
         } catch (e: Exception) {
             Log.e("ImageViewer", "Error loading images", e)
         } finally {
             isLoading = false
         }
     }
 
     LaunchedEffect(currentIndex) {
         if (imageItems.isNotEmpty() && currentIndex >= 0 && currentIndex < imageItems.size) {
             scope.launch {
                 val currentItem = imageItems[currentIndex]
                 Log.d("ImageViewer", "Switching to image: ${currentItem.name}")
 
                 val url = MainActivity.oneDriveRepository
                     .getDownloadUrl(currentItem.id)
                     ?: currentItem.downloadUrl
                 imageUrl = url
+                showInfo.value = true
+                scope.launch {
+                    kotlinx.coroutines.delay(3000)
+                    showInfo.value = false
+                }
             }
         }
     }
 
     LaunchedEffect(Unit) {
         focusRequester.requestFocus()
     }
 
     BackHandler { onBack() }
 
     Box(
         modifier = Modifier
             .fillMaxSize()
             .background(Color.Black)
             .focusRequester(focusRequester)
             .focusable()
             .onKeyEvent { keyEvent ->
                 if (keyEvent.type == KeyEventType.KeyDown) {
                     when (keyEvent.key) {
                         Key.DirectionLeft -> {
                             if (currentIndex > 0) {
                                 currentIndex--
                                 Log.d("ImageViewer", "Navigate left to index: $currentIndex")
                             }
                             true
@@ -111,92 +119,106 @@ fun ImageViewerScreen(
                         Key.DirectionRight -> {
                             if (currentIndex < imageItems.size - 1) {
                                 currentIndex++
                                 Log.d("ImageViewer", "Navigate right to index: $currentIndex")
                             }
                             true
                         }
                         Key.Back, Key.Escape -> {
                             Log.d("ImageViewer", "Back pressed")
                             onBack()
                             true
                         }
                         else -> false
                     }
                 } else false
             }
     ) {
         when {
             isLoading -> {
                 CircularProgressIndicator(
                     modifier = Modifier.align(Alignment.Center),
                     color = MaterialTheme.colorScheme.primary
                 )
             }
             imageUrl != null -> {
-                SubcomposeAsyncImage(
+                SubcomposeAsyncImage(
                     model = ImageRequest.Builder(context)
                         .data(imageUrl)
                         .crossfade(true)
                         .build(),
                     contentDescription = if (imageItems.isNotEmpty() && currentIndex < imageItems.size) {
                         imageItems[currentIndex].name
                     } else {
                         null
                     },
                     contentScale = ContentScale.Fit,
                     modifier = Modifier.fillMaxSize(),
                     loading = {
                         Box(
                             modifier = Modifier.fillMaxSize(),
                             contentAlignment = Alignment.Center
                         ) {
                             Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                 CircularProgressIndicator(color = Color.White)
                                 Spacer(modifier = Modifier.height(16.dp))
                                 Text("画像を読み込み中...", color = Color.White)
                             }
                         }
                     },
                     error = {
                         Box(
                             modifier = Modifier.fillMaxSize(),
                             contentAlignment = Alignment.Center
                         ) {
                             Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                 Icon(
                                     imageVector = Icons.Default.BrokenImage,
                                     contentDescription = "エラー",
                                     modifier = Modifier.size(64.dp),
                                     tint = Color.White
                                 )
                                 Spacer(modifier = Modifier.height(8.dp))
                                 Text("画像を読み込めませんでした", color = Color.White)
                             }
                         }
                     }
-                )
+                )
+
+                if (showInfo.value && imageItems.isNotEmpty() && currentIndex < imageItems.size) {
+                    val item = imageItems[currentIndex]
+                    val dateFormat = java.text.SimpleDateFormat("yyyy/MM/dd", java.util.Locale.getDefault())
+                    Column(
+                        modifier = Modifier
+                            .align(Alignment.TopStart)
+                            .background(Color.Black.copy(alpha = 0.6f))
+                            .padding(8.dp)
+                    ) {
+                        Text(item.name, color = Color.White, style = MaterialTheme.typography.bodyMedium)
+                        Text(dateFormat.format(item.lastModified), color = Color.White, style = MaterialTheme.typography.bodySmall)
+                    }
+                }
 
                 if (imageItems.size > 1) {
                     Row(
                         modifier = Modifier
                             .align(Alignment.BottomCenter)
                             .padding(bottom = 32.dp)
                             .background(Color.Black.copy(alpha = 0.7f))
                             .padding(horizontal = 16.dp, vertical = 8.dp),
                         horizontalArrangement = Arrangement.Center
                     ) {
                         Text(
                             text = "${currentIndex + 1} / ${imageItems.size}",
                             color = Color.White,
                             style = MaterialTheme.typography.bodyLarge
                         )
                     }
                 }
             }
             else -> {
                 Box(
                     modifier = Modifier.fillMaxSize(),
                     contentAlignment = Alignment.Center
                 ) {
                     Text("画像が見つかりません", color = Color.White)
                 }
diff --git a/app/src/main/java/com/example/tvmoview/presentation/screens/ModernMediaBrowser.kt b/app/src/main/java/com/example/tvmoview/presentation/screens/ModernMediaBrowser.kt
index f37ffa2c2e76754e76b255851bda653abeb91c61..d13909a9eb416f1c2e9b9a699b1a718095e6939e 100644
--- a/app/src/main/java/com/example/tvmoview/presentation/screens/ModernMediaBrowser.kt
+++ b/app/src/main/java/com/example/tvmoview/presentation/screens/ModernMediaBrowser.kt
@@ -1,171 +1,203 @@
 ﻿package com.example.tvmoview.presentation.screens
 
 import android.util.Log
 import androidx.compose.animation.*
 import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.*
 import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.*
-import androidx.compose.material3.*
-import androidx.compose.runtime.*
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Brush
-import androidx.compose.ui.unit.dp
+import androidx.compose.material.icons.filled.*
+import androidx.compose.material3.*
+import androidx.compose.runtime.*
+import androidx.compose.ui.draw.rotate
+import androidx.compose.foundation.lazy.grid.*
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.unit.dp
 import androidx.lifecycle.viewmodel.compose.viewModel
 import com.example.tvmoview.MainActivity
 import com.example.tvmoview.domain.model.*
 import com.example.tvmoview.presentation.components.*
 import com.example.tvmoview.presentation.viewmodels.MediaBrowserViewModel
-import com.example.tvmoview.presentation.viewmodels.ViewMode
-import com.example.tvmoview.presentation.viewmodels.SortBy
+import com.example.tvmoview.presentation.viewmodels.ViewMode
+import com.example.tvmoview.presentation.viewmodels.SortBy
+import com.example.tvmoview.presentation.viewmodels.SortOrder
+import kotlinx.coroutines.launch
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun ModernMediaBrowser(
     folderId: String? = null,
     onMediaSelected: (MediaItem) -> Unit,
     onFolderSelected: (String) -> Unit,
     onSettingsClick: (() -> Unit)? = null,
     onBackClick: (() -> Unit)? = null
 ) {
-    val viewModel: MediaBrowserViewModel = viewModel()
-    val items by viewModel.items.collectAsState()
-    val isLoading by viewModel.isLoading.collectAsState()
-    val viewMode by viewModel.viewMode.collectAsState()
-    val sortBy by viewModel.sortBy.collectAsState()
-    val currentPath by viewModel.currentPath.collectAsState()
+    val viewModel: MediaBrowserViewModel = viewModel()
+    val items by viewModel.items.collectAsState()
+    val isLoading by viewModel.isLoading.collectAsState()
+    val viewMode by viewModel.viewMode.collectAsState()
+    val sortBy by viewModel.sortBy.collectAsState()
+    val sortOrder by viewModel.sortOrder.collectAsState()
+    val tileColumns by viewModel.tileColumns.collectAsState()
+    val currentPath by viewModel.currentPath.collectAsState()
 
-    var showSortDialog by remember { mutableStateOf(false) }
+    var showSortDialog by remember { mutableStateOf(false) }
+    val gridState = rememberLazyGridState()
+    val coroutineScope = rememberCoroutineScope()
 
     // OneDrive統合：データ取得処理
     LaunchedEffect(folderId) {
         Log.d("ModernMediaBrowser", "📁 フォルダ読み込み開始: $folderId")
         viewModel.loadItems(folderId)
     }
 
     Box(
         modifier = Modifier
             .fillMaxSize()
             .background(
                 Brush.verticalGradient(
                     colors = listOf(
                         MaterialTheme.colorScheme.background,
                         MaterialTheme.colorScheme.surface
                     )
                 )
             )
     ) {
         Column {
-            ModernTopBar(
-                currentPath = currentPath,
-                viewMode = viewMode,
-                onViewModeChange = { viewModel.toggleViewMode() },
-                onSortClick = { showSortDialog = true },
-                onRefreshClick = { viewModel.refresh() },
-                onSettingsClick = onSettingsClick,
-                onBackClick = onBackClick,
-                isLoading = isLoading
-            )
+            ModernTopBar(
+                currentPath = currentPath,
+                viewMode = viewMode,
+                sortOrder = sortOrder,
+                tileColumns = tileColumns,
+                onViewModeChange = { viewModel.toggleViewMode() },
+                onTileColumnsChange = { viewModel.cycleTileColumns() },
+                onSortClick = { showSortDialog = true },
+                onOrderToggle = { viewModel.setSortOrder(if (sortOrder == SortOrder.ASC) SortOrder.DESC else SortOrder.ASC) },
+                onRefreshClick = { viewModel.refresh() },
+                onSettingsClick = onSettingsClick,
+                onBackClick = onBackClick,
+                isLoading = isLoading
+            )
 
             Box(modifier = Modifier.fillMaxSize()) {
                 when {
                     // 初回読み込み時のみローディング表示（データがない + 読み込み中）
                     isLoading && items.isEmpty() -> LoadingAnimation()
 
                     // データが空でローディング中でない場合
                     items.isEmpty() && !isLoading -> EmptyStateView()
 
                     // データがある場合は常にコンテンツ表示（手動更新中でも表示継続）
                     else -> {
                         when (viewMode) {
                             ViewMode.TILE -> {
-                                ModernTileView(
-                                    items = items,
-                                    onItemClick = { item ->
-                                        if (item.isFolder) {
-                                            Log.d("ModernMediaBrowser", "📂 フォルダ選択: ${item.name}")
-                                            onFolderSelected(item.id)
-                                        } else {
+                                ModernTileView(
+                                    items = items,
+                                    columnCount = tileColumns,
+                                    state = gridState,
+                                    onItemClick = { item ->
+                                        if (item.isFolder) {
+                                            Log.d("ModernMediaBrowser", "📂 フォルダ選択: ${item.name}")
+                                            onFolderSelected(item.id)
+                                        } else {
                                             Log.d("ModernMediaBrowser", "🎬 メディア選択: ${item.name}")
                                             Log.d("ModernMediaBrowser", "📊 downloadUrl: ${item.downloadUrl}")
                                             onMediaSelected(item)
                                         }
-                                    }
-                                )
-                            }
-                            ViewMode.LIST -> {
+                                    }
+                                )
+                                if (sortBy == SortBy.SHOOT) {
+                                    Slider(
+                                        modifier = Modifier
+                                            .align(Alignment.CenterEnd)
+                                            .height(200.dp)
+                                            .rotate(90f),
+                                        value = gridState.firstVisibleItemIndex.toFloat(),
+                                        onValueChange = {
+                                            coroutineScope.launch {
+                                                gridState.scrollToItem(it.toInt())
+                                            }
+                                        },
+                                        valueRange = 0f..(items.size - 1).coerceAtLeast(0).toFloat(),
+                                        steps = (items.size - 2).coerceAtLeast(0)
+                                    )
+                                }
+                            }
+                            ViewMode.LIST -> {
                                 ModernListView(
                                     items = items,
                                     onItemClick = { item ->
                                         if (item.isFolder) {
                                             Log.d("ModernMediaBrowser", "📂 フォルダ選択: ${item.name}")
                                             onFolderSelected(item.id)
                                         } else {
                                             Log.d("ModernMediaBrowser", "🎬 メディア選択: ${item.name}")
                                             Log.d("ModernMediaBrowser", "📊 downloadUrl: ${item.downloadUrl}")
                                             onMediaSelected(item)
                                         }
                                     }
                                 )
                             }
                         }
                     }
                 }
 
                 // OneDrive統合状態表示（デバッグ用）
                 if (MainActivity.authManager.isAuthenticated()) {
                     Card(
                         modifier = Modifier
                             .align(Alignment.BottomEnd)
                             .padding(16.dp),
                         colors = CardDefaults.cardColors(
                             containerColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.8f)
                         )
                     ) {
                         Text(
                             text = "🔐 OneDrive接続中",
                             color = MaterialTheme.colorScheme.onPrimary,
                             style = MaterialTheme.typography.bodySmall,
                             modifier = Modifier.padding(8.dp)
                         )
                     }
                 }
             }
         }
 
-        if (showSortDialog) {
-            SortDialog(
-                currentSort = sortBy,
-                onSortSelected = { sort ->
-                    viewModel.setSortBy(sort)
-                    showSortDialog = false
-                },
-                onDismiss = { showSortDialog = false }
-            )
-        }
+        if (showSortDialog) {
+            SortDialog(
+                currentSort = sortBy,
+                currentOrder = sortOrder,
+                onSortSelected = { sort ->
+                    viewModel.setSortBy(sort)
+                    showSortDialog = false
+                },
+                onOrderSelected = { order -> viewModel.setSortOrder(order) },
+                onDismiss = { showSortDialog = false }
+            )
+        }
     }
 }
 
 @Composable
 fun LoadingAnimation() {
     Box(
         modifier = Modifier.fillMaxSize(),
         contentAlignment = Alignment.Center
     ) {
         Column(
             horizontalAlignment = Alignment.CenterHorizontally
         ) {
             CircularProgressIndicator()
             Spacer(modifier = Modifier.height(16.dp))
             Text("OneDriveから読み込み中...")
         }
     }
 }
 
 @Composable
 fun EmptyStateView() {
     Box(
         modifier = Modifier.fillMaxSize(),
         contentAlignment = Alignment.Center
     ) {
@@ -195,43 +227,44 @@ fun EmptyStateView() {
 
 @Composable
 fun SortDialog(
     currentSort: SortBy,
     onSortSelected: (SortBy) -> Unit,
     onDismiss: () -> Unit
 ) {
     AlertDialog(
         onDismissRequest = onDismiss,
         title = { Text("並び順") },
         text = {
             Column {
                 SortBy.values().forEach { sortOption ->
                     Row(
                         modifier = Modifier
                             .fillMaxWidth()
                             .padding(vertical = 4.dp),
                         verticalAlignment = Alignment.CenterVertically
                     ) {
                         RadioButton(
                             selected = currentSort == sortOption,
                             onClick = { onSortSelected(sortOption) }
                         )
                         Spacer(modifier = Modifier.width(8.dp))
                         Text(
-                            text = when (sortOption) {
-                                SortBy.NAME -> "名前順"
-                                SortBy.DATE -> "更新日時順"
-                                SortBy.SIZE -> "サイズ順"
-                                SortBy.TYPE -> "種類順"
-                            }
+                            text = when (sortOption) {
+                                SortBy.NAME -> "名前順"
+                                SortBy.DATE -> "更新日時順"
+                                SortBy.SIZE -> "サイズ順"
+                                SortBy.TYPE -> "種類順"
+                                SortBy.SHOOT -> "撮影日順"
+                            }
                         )
                     }
                 }
             }
         },
         confirmButton = {
             TextButton(onClick = onDismiss) {
                 Text("閉じる")
             }
         }
     )
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/example/tvmoview/presentation/viewmodels/MediaBrowserViewModel.kt b/app/src/main/java/com/example/tvmoview/presentation/viewmodels/MediaBrowserViewModel.kt
index 95a42ff3dedabeb8426f646122e66eba77d6a09a..b5261ad94b15f33ae80f0cdbc25f470cded02ba7 100644
--- a/app/src/main/java/com/example/tvmoview/presentation/viewmodels/MediaBrowserViewModel.kt
+++ b/app/src/main/java/com/example/tvmoview/presentation/viewmodels/MediaBrowserViewModel.kt
@@ -1,106 +1,121 @@
 ﻿package com.example.tvmoview.presentation.viewmodels
 
 import android.util.Log
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.asStateFlow
 import kotlinx.coroutines.Job
 import kotlinx.coroutines.launch
 import com.example.tvmoview.domain.model.MediaItem
-import com.example.tvmoview.MainActivity
-import java.util.Date
+import com.example.tvmoview.MainActivity
+import com.example.tvmoview.data.prefs.UserPreferences
+import java.util.Date
 
 enum class ViewMode {
     TILE, LIST
 }
 
-enum class SortBy {
-    NAME, DATE, SIZE, TYPE
-}
+enum class SortBy {
+    NAME, DATE, SIZE, TYPE, SHOOT
+}
+
+enum class SortOrder {
+    ASC, DESC
+}
 
 class MediaBrowserViewModel : ViewModel() {
 
     private val _items = MutableStateFlow<List<MediaItem>>(emptyList())
     val items: StateFlow<List<MediaItem>> = _items.asStateFlow()
 
     private val _isLoading = MutableStateFlow(false)
     val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
 
     private val _viewMode = MutableStateFlow(ViewMode.TILE)
     val viewMode: StateFlow<ViewMode> = _viewMode.asStateFlow()
 
-    private val _sortBy = MutableStateFlow(SortBy.NAME)
-    val sortBy: StateFlow<SortBy> = _sortBy.asStateFlow()
+    private val _sortBy = MutableStateFlow(SortBy.valueOf(UserPreferences.sortBy))
+    val sortBy: StateFlow<SortBy> = _sortBy.asStateFlow()
+
+    private val _sortOrder = MutableStateFlow(SortOrder.valueOf(UserPreferences.sortOrder))
+    val sortOrder: StateFlow<SortOrder> = _sortOrder.asStateFlow()
+
+    private val _tileColumns = MutableStateFlow(UserPreferences.tileColumns)
+    val tileColumns: StateFlow<Int> = _tileColumns.asStateFlow()
 
     private val _currentPath = MutableStateFlow("OneDrive")
     val currentPath: StateFlow<String> = _currentPath.asStateFlow()
 
     private val _currentFolderId = MutableStateFlow<String?>(null)
     val currentFolderId: StateFlow<String?> = _currentFolderId.asStateFlow()
 
     private var loadJob: Job? = null
 
     fun loadItems(folderId: String? = null, force: Boolean = false) {
         loadJob?.cancel()
         _currentFolderId.value = folderId
         _currentPath.value = if (folderId != null) {
             MainActivity.oneDriveRepository.getCurrentPath(folderId)
         } else {
             "OneDrive"
         }
 
         Log.d(
             "MediaBrowserViewModel",
             "loadItems(folder=${folderId ?: "root"}, force=$force)"
         )
 
-        loadJob = viewModelScope.launch {
-            // まずキャッシュを即座に表示
-            val cachedItems = MainActivity.oneDriveRepository.getCachedItems(folderId)
-            if (cachedItems.isNotEmpty()) {
-                _items.value = applySorting(cachedItems)
-                _isLoading.value = false
-                Log.d("MediaBrowserViewModel", "Showing ${cachedItems.size} cached items immediately")
-            } else {
-                _isLoading.value = true
-            }
+        loadJob = viewModelScope.launch {
+            val limit = 30
+            val cachedItems = MainActivity.oneDriveRepository.getCachedItems(folderId)
+            if (cachedItems.isNotEmpty()) {
+                val sorted = applySorting(cachedItems)
+                _items.value = sorted.take(limit)
+                _isLoading.value = false
+                launch { _items.value = sorted }
+                Log.d("MediaBrowserViewModel", "Showing ${cachedItems.size} cached items immediately")
+            } else {
+                _isLoading.value = true
+            }
 
             // OneDrive統合の場合
-            if (MainActivity.authManager.isAuthenticated()) {
-                MainActivity.oneDriveRepository.getFolderItems(folderId, force).collect { list ->
-                    _items.value = applySorting(list)
-                    if (_isLoading.value) {
-                        _isLoading.value = false
-                    }
-                    Log.d(
-                        "MediaBrowserViewModel",
-                        "items updated: ${list.size} entries"
-                    )
-                }
+            if (MainActivity.authManager.isAuthenticated()) {
+                MainActivity.oneDriveRepository.getFolderItems(folderId, force).collect { list ->
+                    val sorted = applySorting(list)
+                    _items.value = sorted.take(limit)
+                    launch { _items.value = sorted }
+                    if (_isLoading.value) {
+                        _isLoading.value = false
+                    }
+                    Log.d(
+                        "MediaBrowserViewModel",
+                        "items updated: ${list.size} entries"
+                    )
+                }
             } else {
                 // テストデータの場合
                 val items = loadTestItems(folderId)
                 _items.value = applySorting(items)
                 _isLoading.value = false
             }
         }
     }
 
     private fun loadTestItems(folderId: String?): List<MediaItem> {
         return try {
             // MediaRepositoryの正しいメソッド名を使用
             if (folderId != null) {
                 // フォルダ指定の場合（仮実装：空リスト）
                 emptyList()
             } else {
                 // ルートの場合：テストデータ生成
                 generateTestMediaItems()
             }
         } catch (e: Exception) {
             Log.e("MediaBrowserViewModel", "❌ テストデータ取得失敗", e)
             emptyList()
         }
     }
 
@@ -112,95 +127,127 @@ class MediaBrowserViewModel : ViewModel() {
                 name = "サンプル動画1.mp4",
                 size = 125829120,
                 mimeType = "video/mp4",
                 isFolder = false,
                 downloadUrl = null
             ),
             MediaItem(
                 id = "test_video_2",
                 name = "サンプル動画2.mp4",
                 size = 89654321,
                 mimeType = "video/mp4",
                 isFolder = false,
                 downloadUrl = null
             ),
             MediaItem(
                 id = "test_folder_1",
                 name = "サンプルフォルダ",
                 size = 0,
                 mimeType = null,
                 isFolder = true,
                 downloadUrl = null
             )
         )
     }
 
-    fun toggleViewMode() {
-        _viewMode.value = when (_viewMode.value) {
-            ViewMode.TILE -> ViewMode.LIST
-            ViewMode.LIST -> ViewMode.TILE
-        }
-        Log.d("MediaBrowserViewModel", "🎨 表示モード変更: ${_viewMode.value}")
-    }
-
-    fun setSortBy(sortBy: SortBy) {
-        _sortBy.value = sortBy
-
-        // 現在のアイテムに新しいソートを適用
-        val currentItems = _items.value
-        val sortedItems = applySorting(currentItems)
-        _items.value = sortedItems
-
-        Log.d("MediaBrowserViewModel", "🔀 ソート変更: $sortBy")
-    }
-
-    private fun applySorting(items: List<MediaItem>): List<MediaItem> {
-        return when (_sortBy.value) {
-            SortBy.NAME -> items.sortedBy { it.name.lowercase() }
-            SortBy.DATE -> items.sortedByDescending { it.lastModified }
-            SortBy.SIZE -> items.sortedByDescending { it.size }
-            SortBy.TYPE -> items.sortedWith(
-                compareBy<MediaItem> { !it.isFolder }
-                    .thenBy { it.mimeType ?: "" }
-                    .thenBy { it.name.lowercase() }
-            )
-        }
-    }
+    fun toggleViewMode() {
+        _viewMode.value = when (_viewMode.value) {
+            ViewMode.TILE -> ViewMode.LIST
+            ViewMode.LIST -> ViewMode.TILE
+        }
+        Log.d("MediaBrowserViewModel", "🎨 表示モード変更: ${_viewMode.value}")
+    }
+
+    fun cycleTileColumns() {
+        val next = when (_tileColumns.value) {
+            4 -> 6
+            6 -> 8
+            else -> 4
+        }
+        _tileColumns.value = next
+        UserPreferences.tileColumns = next
+    }
+
+    fun setSortBy(sortBy: SortBy) {
+        _sortBy.value = sortBy
+        UserPreferences.sortBy = sortBy.name
+
+        // 現在のアイテムに新しいソートを適用
+        val currentItems = _items.value
+        val sortedItems = applySorting(currentItems)
+        _items.value = sortedItems
+
+        Log.d("MediaBrowserViewModel", "🔀 ソート変更: $sortBy")
+    }
+
+    fun setSortOrder(order: SortOrder) {
+        _sortOrder.value = order
+        UserPreferences.sortOrder = order.name
+        val currentItems = _items.value
+        _items.value = applySorting(currentItems)
+    }
+
+    private fun applySorting(items: List<MediaItem>): List<MediaItem> {
+        val sorted = when (_sortBy.value) {
+            SortBy.NAME -> items.sortedWith(
+                compareBy<MediaItem> { !it.isFolder }
+                    .thenBy { it.name.lowercase() }
+            )
+            SortBy.DATE -> items.sortedWith(
+                compareBy<MediaItem> { !it.isFolder }
+                    .thenBy { it.lastModified }
+            )
+            SortBy.SIZE -> items.sortedWith(
+                compareBy<MediaItem> { !it.isFolder }
+                    .thenBy { it.size }
+            )
+            SortBy.TYPE -> items.sortedWith(
+                compareBy<MediaItem> { !it.isFolder }
+                    .thenBy { it.mimeType ?: "" }
+                    .thenBy { it.name.lowercase() }
+            )
+            SortBy.SHOOT -> items.sortedWith(
+                compareBy<MediaItem> { !it.isFolder }
+                    .thenBy { it.lastModified }
+            )
+        }
+        return if (_sortOrder.value == SortOrder.DESC) sorted.reversed() else sorted
+    }
 
     fun refresh() {
         Log.d("MediaBrowserViewModel", "🔄 バックグラウンド更新開始")
 
         // TOPバーのローディング表示のみ開始（画面表示は維持）
         _isLoading.value = true
 
         loadJob?.cancel()
         loadJob = viewModelScope.launch {
             try {
                 Log.d("MediaBrowserViewModel", "🌐 バックグラウンド処理開始")
 
                 // OneDrive統合の場合
-                if (MainActivity.authManager.isAuthenticated()) {
-                    // force=true でバックグラウンド更新
-                    MainActivity.oneDriveRepository.getFolderItems(_currentFolderId.value, force = true).collect { newList ->
-                        // 新しいデータが取得できた時のみ画面更新
-                        if (newList.isNotEmpty() || _items.value.isEmpty()) {
-                            _items.value = applySorting(newList)
-                            Log.d("MediaBrowserViewModel", "✅ バックグラウンド更新完了: ${newList.size} entries")
-                        }
-
-                        // ローディング状態終了
-                        _isLoading.value = false
-                    }
-                } else {
-                    // テストデータの場合
-                    val items = loadTestItems(_currentFolderId.value)
-                    _items.value = applySorting(items)
-                    _isLoading.value = false
-                    Log.d("MediaBrowserViewModel", "✅ テストデータ更新完了")
-                }
+                if (MainActivity.authManager.isAuthenticated()) {
+                    MainActivity.oneDriveRepository.getFolderItems(_currentFolderId.value, force = true).collect { newList ->
+                        val sorted = applySorting(newList)
+                        if (newList.isNotEmpty() || _items.value.isEmpty()) {
+                            _items.value = sorted.take(30)
+                            launch { _items.value = sorted }
+                            Log.d("MediaBrowserViewModel", "✅ バックグラウンド更新完了: ${newList.size} entries")
+                        }
+
+                        _isLoading.value = false
+                    }
+                } else {
+                    val items = loadTestItems(_currentFolderId.value)
+                    val sorted = applySorting(items)
+                    _items.value = sorted.take(30)
+                    launch { _items.value = sorted }
+                    _isLoading.value = false
+                    Log.d("MediaBrowserViewModel", "✅ テストデータ更新完了")
+                }
             } catch (e: Exception) {
                 Log.e("MediaBrowserViewModel", "❌ バックグラウンド更新エラー", e)
                 _isLoading.value = false
             }
         }
     }
 }
\ No newline at end of file
diff --git a/build.gradle.kts b/build.gradle.kts
index 20dd7b236e30b283344ac42b1c60733e83e08284..333640368f8b2246896ea366e98106649cb49c06 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,7 +1,7 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 plugins {
     id("com.android.application") version "8.2.0" apply false
     id("org.jetbrains.kotlin.android") version "2.0.0" apply false
     id("org.jetbrains.kotlin.plugin.compose") version "2.0.0" apply false
-    id("org.jetbrains.kotlin.kapt") version "2.0.0" apply false
-}
\ No newline at end of file
+    id("com.google.devtools.ksp") version "2.0.20-1.0.21" apply false
+}
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
index f21f561d8c3e3da34ed581b3a4c75defcc4c4205..8b5bf09864a2d89b7b0703d8054b1bb784653a6e 100644
--- a/gradle/libs.versions.toml
+++ b/gradle/libs.versions.toml
@@ -1,32 +1,60 @@
 [versions]
-agp = "8.10.1"
-kotlin = "2.0.21"
-coreKtx = "1.16.0"
+agp = "8.2.0"
+kotlin = "2.0.0"
+coreKtx = "1.12.0"
 junit = "4.13.2"
 junitVersion = "1.2.1"
 espressoCore = "3.6.1"
-lifecycleRuntimeKtx = "2.9.1"
-activityCompose = "1.10.1"
-composeBom = "2024.09.00"
+lifecycleRuntimeKtx = "2.7.0"
+activityCompose = "1.8.2"
+composeBom = "2024.02.00"
+navigationCompose = "2.7.6"
+coroutines = "1.7.3"
+coil = "2.5.0"
+room = "2.6.1"
+media3 = "1.2.1"
+okhttp = "4.12.0"
+retrofit = "2.9.0"
+gson = "2.8.9"
+tvFoundation = "1.0.0-alpha10"
 
 [libraries]
 androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
 junit = { group = "junit", name = "junit", version.ref = "junit" }
 androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
 androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
 androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
 androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
 androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
 androidx-ui = { group = "androidx.compose.ui", name = "ui" }
 androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
 androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
 androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
 androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
 androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
 androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
+androidx-navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigationCompose" }
+kotlinx-coroutines-android = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-android", version.ref = "coroutines" }
+androidx-tv-foundation = { group = "androidx.tv", name = "tv-foundation", version.ref = "tvFoundation" }
+androidx-tv-material = { group = "androidx.tv", name = "tv-material", version.ref = "tvFoundation" }
+androidx-leanback = { group = "androidx.leanback", name = "leanback", version = "1.0.0" }
+androidx-media3-exoplayer = { group = "androidx.media3", name = "media3-exoplayer", version.ref = "media3" }
+androidx-media3-ui = { group = "androidx.media3", name = "media3-ui", version.ref = "media3" }
+androidx-media3-common = { group = "androidx.media3", name = "media3-common", version.ref = "media3" }
+coil-compose = { group = "io.coil-kt", name = "coil-compose", version.ref = "coil" }
+coil = { group = "io.coil-kt", name = "coil", version.ref = "coil" }
+androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
+androidx-room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
+androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
+okhttp = { group = "com.squareup.okhttp3", name = "okhttp", version.ref = "okhttp" }
+okhttp-logging = { group = "com.squareup.okhttp3", name = "logging-interceptor", version.ref = "okhttp" }
+retrofit = { group = "com.squareup.retrofit2", name = "retrofit", version.ref = "retrofit" }
+retrofit-converter-gson = { group = "com.squareup.retrofit2", name = "converter-gson", version.ref = "retrofit" }
+gson = { group = "com.google.code.gson", name = "gson", version.ref = "gson" }
 
 [plugins]
 android-application = { id = "com.android.application", version.ref = "agp" }
 kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
 kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
+ksp = { id = "com.google.devtools.ksp", version = "2.0.20-1.0.21" }
 
diff --git a/gradle/libs.versions.toml.rej b/gradle/libs.versions.toml.rej
deleted file mode 100644
index 7e7b786285a435ffb7878293b9e8c766973d9de1..0000000000000000000000000000000000000000
--- a/gradle/libs.versions.toml.rej
+++ /dev/null
@@ -1,67 +0,0 @@
-diff a/gradle/libs.versions.toml b/gradle/libs.versions.toml	(rejected hunks)
-@@ -1,32 +1,59 @@
- [versions]
--agp = "8.10.1"
--kotlin = "2.0.21"
--coreKtx = "1.16.0"
-+agp = "8.2.0"
-+kotlin = "2.0.0"
-+coreKtx = "1.12.0"
- junit = "4.13.2"
- junitVersion = "1.2.1"
- espressoCore = "3.6.1"
--lifecycleRuntimeKtx = "2.9.1"
--activityCompose = "1.10.1"
--composeBom = "2024.09.00"
-+lifecycleRuntimeKtx = "2.7.0"
-+activityCompose = "1.8.2"
-+composeBom = "2024.02.00"
-+navigationCompose = "2.7.6"
-+coroutines = "1.7.3"
-+coil = "2.5.0"
-+room = "2.6.1"
-+media3 = "1.2.1"
-+okhttp = "4.12.0"
-+retrofit = "2.9.0"
-+gson = "2.8.9"
-+tvFoundation = "1.0.0-alpha10"
- 
- [libraries]
- androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
- junit = { group = "junit", name = "junit", version.ref = "junit" }
- androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
- androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
- androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
- androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
- androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
- androidx-ui = { group = "androidx.compose.ui", name = "ui" }
- androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
- androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
- androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
- androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
- androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
- androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
-+androidx-navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigationCompose" }
-+kotlinx-coroutines-android = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-android", version.ref = "coroutines" }
-+androidx-tv-foundation = { group = "androidx.tv", name = "tv-foundation", version.ref = "tvFoundation" }
-+androidx-tv-material = { group = "androidx.tv", name = "tv-material", version.ref = "tvFoundation" }
-+androidx-leanback = { group = "androidx.leanback", name = "leanback", version = "1.0.0" }
-+androidx-media3-exoplayer = { group = "androidx.media3", name = "media3-exoplayer", version.ref = "media3" }
-+androidx-media3-ui = { group = "androidx.media3", name = "media3-ui", version.ref = "media3" }
-+androidx-media3-common = { group = "androidx.media3", name = "media3-common", version.ref = "media3" }
-+coil-compose = { group = "io.coil-kt", name = "coil-compose", version.ref = "coil" }
-+androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
-+androidx-room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
-+androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
-+okhttp = { group = "com.squareup.okhttp3", name = "okhttp", version.ref = "okhttp" }
-+okhttp-logging = { group = "com.squareup.okhttp3", name = "logging-interceptor", version.ref = "okhttp" }
-+retrofit = { group = "com.squareup.retrofit2", name = "retrofit", version.ref = "retrofit" }
-+retrofit-converter-gson = { group = "com.squareup.retrofit2", name = "converter-gson", version.ref = "retrofit" }
-+gson = { group = "com.google.code.gson", name = "gson", version.ref = "gson" }
- 
- [plugins]
- android-application = { id = "com.android.application", version.ref = "agp" }
- kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
- kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
-+kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
- 
diff --git a/settings.gradle.kts b/settings.gradle.kts
index 7a8a435094931273d59a036dcd30316ba464e721..9f54c13348b9096730534eb62b0d7003c10f94aa 100644
--- a/settings.gradle.kts
+++ b/settings.gradle.kts
@@ -1,24 +1,18 @@
 pluginManagement {
     repositories {
-        google {
-            content {
-                includeGroupByRegex("com\\.android.*")
-                includeGroupByRegex("com\\.google.*")
-                includeGroupByRegex("androidx.*")
-            }
-        }
+        google()
         mavenCentral()
         gradlePluginPortal()
     }
 }
 dependencyResolutionManagement {
     repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
     repositories {
         google()
         mavenCentral()
     }
 }
 
 rootProject.name = "tv moview"
 include(":app")
  
\ No newline at end of file
diff --git "a/\351\226\213\347\231\272\344\276\235\351\240\274\343\203\253\343\203\274\343\203\253.md" "b/\351\226\213\347\231\272\344\276\235\351\240\274\343\203\253\343\203\274\343\203\253.md"
index d144ac543c84687cecf8cb9ca69d24eed8ab60e4..73315c015efcf7f2ecdf657758dc2d0d0b369aa2 100644
--- "a/\351\226\213\347\231\272\344\276\235\351\240\274\343\203\253\343\203\274\343\203\253.md"
+++ "b/\351\226\213\347\231\272\344\276\235\351\240\274\343\203\253\343\203\274\343\203\253.md"
@@ -38,64 +38,64 @@
 |                               | Compose Compiler                    | 2.0.0               |
 | Android SDK                | minSdk / targetSdk                  | 26 / 34             |
 | UI                          | Jetpack Compose BOM                 | 2024.02.00（BOM）   |
 |                               | Compose UI                         | BOM準拠             |
 |                               | Material3                          | 1.2.0               |
 |                               | Compose for TV                     | 1.0.0-alpha10       |
 | 画像                         | Coil                                | 2.5.0               |
 | 動画                         | ExoPlayer（androidx.media3）        | 1.2.1               |
 | OneDrive連携                | Microsoft Graph Java SDK            | 6.0.0               |
 | 認証                         | MSAL                                | 最新安定版          |
 | 通信                         | Retrofit                            | 2.9.0               |
 |                               | OkHttp                              | 4.12.0              |
 | JSON                        | Gson                                | 2.8.9               |
 | DB                          | Room                                | 2.6.1               |
 | ナビゲーション               | Navigation-Compose                  | 2.7.6               |
 | Activityコンポーネント        | androidx.activity:*                 | 1.8.2               |
 | ライフサイクル管理            | androidx.lifecycle:*                | 2.7.0               |
 | コルーチン                   | kotlinx-coroutines-*                | 1.7.3               |
 | コレクション操作             | androidx.collection:*               | 1.4.0               |
 | アノテーション関連            | androidx.annotation:*               | 1.7.0               |
 
 ---
 
 ## 🛠️ Kotlin Symbol Processing (KSP) の使用方針
 
-- KSP は `2.0.0-1.0.20` を標準バージョンとする（Kotlin 2.0.0 + Compose 2024系と整合）
+ - KSP は `2.0.20-1.0.21` を標準バージョンとする（Kotlin 2.0.0 + Compose 2024系と整合）
 - `pluginManagement` セクションに `google()` および `mavenCentral()` を明記し、KSP解決エラーを防止すること
 - `libs.versions.toml` では以下のように定義する：
 
 ```toml
 [plugins]
-ksp = { id = "com.google.devtools.ksp", version = "2.0.0-1.0.20" }
+ksp = { id = "com.google.devtools.ksp", version = "2.0.20-1.0.21" }
 ```
 
 - `build.gradle.kts` 側でも下記のように指定：
 
 ```kotlin
 plugins {
-    id("com.google.devtools.ksp") version "2.0.0-1.0.20"
+    id("com.google.devtools.ksp") version "2.0.20-1.0.21"
 }
 ```
 
 ---
 
 ## ☑️ ビルドツール関連ルール（Build Processor）
 
 - ✅ RoomやHiltなどアノテーション処理系ライブラリは **KSP のみ使用可**
 - ❌ `kapt(...)` の依存追加、および `id("kotlin.kapt")` の使用は禁止
 - ✅ Kotlin 2.0 / Gradle 8 対応を前提に KSP を基本とする
 - ✅ Room, Dagger, Hilt などは KSP 対応版に統一
 - 🧪 ビルドログ中に `kaptGenerateStubsDebugKotlin` が出現した場合、KAPT依存が残っているため即時修正
 
 ---
 
 ## ❌ 禁止ライブラリ・禁止事項
 
 - Material2 / AppCompat 系 UI
 - Ktor / Apollo / Moshi（未採用のHTTP/JSON）
 - Microsoft OneDrive Android SDK（非推奨）
 - Guava の旧バージョン（listenablefuture:1.0など）
 - Coilの混在使用（複数バージョン禁止）
 - Compose関連の非BOM準拠 UIライブラリ
 
 ---
@@ -114,33 +114,33 @@ plugins {
 
 - Kotlin 1.9.21
 - Compose Compiler 1.5.7
 - KSP 1.0.15
 
 → これらは現在非推奨です。生成AI・人間問わず提案には使用しないでください。
 
 ---
 
 ## 🚨 特に注意するポイント
 
 - **新規ライブラリの導入は禁止（一覧の中で実装）**
 - **バージョンカタログ（libs.versions.toml）に定義されていない依存は使わない**
 - **Kotlin, Compose, OkHttpなどは全プロジェクトでバージョン統一必須**
 
 ---
 
 （自動生成日: 2025-06-30 / Kotlin 2.0対応版）
 
 
 
 ## 🔧 バージョンカタログ（libs.versions.toml）でのKSP定義
 
 ```toml
 [plugins]
-ksp = { id = "com.google.devtools.ksp", version = "2.0.0-1.0.20" }
+ksp = { id = "com.google.devtools.ksp", version = "2.0.20-1.0.21" }
 
 [libraries]
 ksp-api = { group = "com.google.devtools.ksp", name = "symbol-processing-api", version.ref = "ksp" }
 ```
 
 - `ksp` プラグインと `symbol-processing-api` ライブラリは、必ず toml に統一して定義すること  
 - `version.ref` により、プラグインとライブラリのバージョンを一元管理する
